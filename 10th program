import keras
from keras.datasets import mnist
(train_images, train_labels),(test_images, test_labels) = mnist.load_data()
from keras import models
from keras import layers
network = models.Sequential()

keras.Input(shape=input_shape),
        layers.Conv2D(32, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Conv2D(64, kernel_size=(3, 3), activation="relu"),
        layers.MaxPooling2D(pool_size=(2, 2)),
        layers.Flatten(),
        layers.Dropout(0.5),
        layers.Dense(num_classes, activation="softmax"),

network.add(layers.Conv2D (32,kernel_size=(3,3), activation='relu', input_shape=(28 ,28,1)))
network.add(layers.MaxPooling2D(pool_size=(2, 2)))
network.add(layers.Conv2D(64, kernel_size=(3, 3), activation="relu"))
network.add(layers.MaxPooling2D(pool_size=(2, 2)))
network.add(layers.Flatten())
network.add(layers.Dropout(0.5))
network.add(layers.Dense(10, activation="softmax"))
network.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])



train_images = train_images.reshape((60000, 28 * 28))
train_images = train_images.astype('float32') / 255

test_images = test_images.reshape((10000, 28 * 28))
test_images = test_images.astype('float32') / 255
from keras.utils import to_categorical

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)
network.fit(train_images, train_labels, epochs=5, batch_size=128
test_loss, test_acc = network.evaluate(test_images, test_labels)
print('test_acc:', test_acc)
