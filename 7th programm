import numpy as np
from tensorflow import keras
from keras.models import Sequential
from keras import datasets
from keras.layers.core import Dense

(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

# Scale images to the [0, 1] range
x_train = x_train.astype("float32") / 255
x_test = x_test.astype("float32") / 255
print("x_train shape:", x_train.shape)
print(x_train.shape[0], "train samples")
print(x_test.shape[0], "test samples")
x_train1=x_train.reshape(60000, 784)
x_test1=x_test.reshape(10000,784)

model = Sequential()
model.add(Dense(392, input_dim=784, activation='relu'))
model.add(Dense(784, activation='relu'))
model.compile(loss='mean_squared_error',
                       optimizer='adam',
                       metrics=['accuracy'])
model.fit(x_train1,x_train1, epochs=5)
scores = model.evaluate(x_test1,x_test1)

decoded_imgs=model.predict(x_test1)
decoded_imgs1=decoded_imgs.reshape(10000,28,28)
decoded_imgs.shape[1]
import matplotlib.pyplot as plt
n = 10 # how many images we will display
plt.figure(figsize=(20, 4))
for i in range(n):
    # display original
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test1[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    
    # display reconstruction
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs1[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

plt.show()
